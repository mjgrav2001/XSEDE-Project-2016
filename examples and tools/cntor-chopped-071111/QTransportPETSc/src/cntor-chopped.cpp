/*
 * cntor-chopped
 * Adapted to C++ by Leon Durivage
 * Original fortran code written by Mario Encinosa and Mark Jack
 *
 * For the specifics behind the science behind this code, please refer to either the old fortran code
 * or the papers written by Dr. Jack and Dr. Encinosa.
 *
 * This code aims to perform the same operations as the old fortran code.
 *
 * It takes as input a file of x,y, and z positions generated by another piece of code. From those
 * positions, it generates the Hamiltonian.
 *
 * The fundemental difference is in how the data is structured. Instead of a large 3600 by 3600
 * array, the data is stored in a series of blocks. Initially, these blocks hold a 12 by 12 array complex<double>
 * data types as well as a few other pieces of data that act as descriptors.
 *
 */



#include <stdio.h>
#include <iostream>
#include <cmath>
#include <fstream>
#include <complex>
#include <cstdio>
#include <complex.h>
#include <math.h>
#include <stdlib.h>
//#include "math-complex.h"
#include "grid_jobs.h"
#include "greens.h"
#include "util.h"
#include "leads.h"
#include "postinv.h"
#include "general.h"

using namespace std;



int main() {

//	blrange- number of 12 by 12 blocks we are dealing with, and corresponds to a (blrange*12)x(blrange*12) sized matrix
//	EX: If blrange == 300 then this simulates a 3600 by 3600 matrix
	static int blrange = 300;
//  hmod - The two dimensional array of blocks. The middle column (second column if the second dimension is 3) corresponds to the main diagonal,
//         with the columns on either side corresponding to the two subdiagonals.
//  EX: If the second dimension is 3, then the first one is T blocks, the second is the main diagonal, and the third is T-dagger.
	static block hmod[300][3];
//  These are the lead attachment vectors. They perform the same function as in the other code.
	int isl[4],isr[4],isl180[4],isr180[4];
	complex <double> gl[4][4], gr[4][4];
	int i,j,temp1,temp2,temp3,temp4;
	double thop;
	double a = 2e0;
	double coord[3600][3];
	thop = -0.25;
//  Set the atoms where the leads are attached.
	isl[0]=1;
	isl[1]=2;
	isl[2]=3589;
	isl[3]=3590;
	isr[0]=1801;
	isr[1]=1802;
	isr[2]=1789;
	isr[3]=1790;

	isl180[0]=1;
	isl180[1]=2;
	isl180[2]=3589;
	isl180[3]=3590;
	isr180[0]=1801;
	isr180[1]=1802;
	isr180[2]=1789;
	isr180[3]=1790;

//
	for(i=0;i<4;i++){
	for(j=0;j<4;j++){
		gl[i][j]= std::complex <double>(0,0);
	}
	}
//
//	 gl[1][1] = std::complex <double>(-4.678802688135959E-002,-1.203406422832061E-002)   ;
//     gr[1][1] = std::complex <double>(-4.678802688135929E-002,-1.203406422831929E-002)   ;
//	 gl[1][3] = std::complex <double>(4.678802688135961E-002, 1.203406422832102E-002) ;
//	 gr[1][3] = std::complex <double>(4.678802688135954E-002, 1.203406422832026E-002) ;
//	 gl[3][1] = std::complex <double>(4.678802688135961E-002, 1.203406422832102E-002) ;
//	 gr[3][1] = std::complex <double>( 4.678802688135954E-002, 1.203406422832026E-002)  ;
//	 gl[3][3] = std::complex <double>(-4.678802688135972E-002,-1.203406422832143E-002) ;
//	 gr[3][3] = std::complex <double>(-4.678802688135972E-002,-1.203406422832122E-002)  ;






//  Set energy. In the future, this will be the initial energy and there will be a loop like in the old code.
	double energy = -0.2e0;
	complex <double> dos2;
	double bfield = (8e0/32e0)*(0.0255664e0/2e0);
//	double bfield = 0e0;
// 	cout <<"Entering Initiation!" << endl;
    cout<< "bfield = "<< bfield<<endl;
//	Creates the equivalent of hmod
 	set_coord(coord);

	init_grid0(hmod,energy,bfield,coord);

//  Loop will be here one point
	while (energy<.2){
	init_grid(hmod,energy,bfield,coord);
//	Performs the equivalent of wiregf
	wiregf(a,energy,100,100,isl180,isr180,isl,isr,gl,gr,coord);

	attach_leads(hmod,isl180,isr180,isl,isr,gl,gr);

	test_invert(hmod,energy,isl,isr,bfield,gl,gr);
	energy=energy+0.00005e0;
	}
//	cout <<"Data reach test-" << (hmod[110][2]).getData(1,0) <<""<< endl;
//	cout <<"Data type test-" << (hmod[110][2]).getType() <<""<< endl;
//	cout <<"Atom col test-" << get_atom_col_block(3433) <<""<< endl;
//	cout <<"Size of one block-" << sizeof(block) <<"bytes"<< endl;
//	cout <<"Size of hmod-" << (sizeof(block)*blrange*blrange)/(1000*1000) <<"MB"<< endl;



	return 0;
}
